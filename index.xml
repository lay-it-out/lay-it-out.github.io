<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lamb</title><link>https://lay-it-out.github.io/</link><description>Recent content on Lamb</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://lay-it-out.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Build</title><link>https://lay-it-out.github.io/docs/getting-started/1_build/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lay-it-out.github.io/docs/getting-started/1_build/</guid><description>We support two ways of building Lamb, if you have installed nix on your machine, we suggest the first option.
Option 1: Via Nix nix build --no-link Refer to this guide in case you got error messages requesting enable the experimental features of Nix.
To enter a bash shell that provides an interactive build environment with all dependencies loaded, type:
nix develop Option 2: Via Docker First, build a Docker image with Nix inside:</description></item><item><title>A Tour of Lamb</title><link>https://lay-it-out.github.io/docs/getting-started/2_tour/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lay-it-out.github.io/docs/getting-started/2_tour/</guid><description>In the Nix development shell, type the following command to run a small example:
python -m lamb tests/motivating-example.bnf Grammar File The file motivating-example.bnf defines a grammar for a toy imperative language, where a block is defined as a list of statements that are aligned with each other, where each statement is either an empty statement nop or a do-block that recursively takes a block as its body:
block ::= stmt|&amp;#43;|; stmt ::= &amp;#34;nop&amp;#34; | &amp;#34;do&amp;#34; block; where notation |+| is the alignment version of Kleene plus: stmt|+| stands for a nonempty sequence of statements that are aligned to each other (i.</description></item><item><title>Replication Package</title><link>https://lay-it-out.github.io/docs/artifact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lay-it-out.github.io/docs/artifact/</guid><description>If you are interested in reproducing the evaluation results mentioned in our paper, please download our artifact from Zenodo. Then follow the instructions of README.md.</description></item><item><title>Coq Doc</title><link>https://lay-it-out.github.io/docs/coq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lay-it-out.github.io/docs/coq/</guid><description>Our Coq proof artifact is included in the Zenodo package and also hosted on Github.
A prebuilt documentation is hosted here.</description></item><item><title>Usage</title><link>https://lay-it-out.github.io/docs/getting-started/3_usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lay-it-out.github.io/docs/getting-started/3_usage/</guid><description>Command Line Options In the Nix development shell (and project root directory), run python -m lamb -h to see help information. Some frequently used command-line toggles are listed below:
-c &amp;lt;length&amp;gt;: stop searching for ambiguous sentences after reaching the given length. This is useful if you want to check the bounded unambiguity of a given grammar. -l &amp;lt;length&amp;gt;: start the checking process at the specified length. This assumes that one has already checked that any shorter sentence under this grammar is unambiguous.</description></item><item><title>About</title><link>https://lay-it-out.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lay-it-out.github.io/about/</guid><description>This work was supported in part by the National Natural Science Foundation of China (Grant No. 62072267 and Grant No. 62021002).</description></item></channel></rss>