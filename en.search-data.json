{"/about/":{"data":{"":"This work was supported in part by the National Natural Science Foundation of China (Grant No. 62072267 and Grant No. 62021002).\n"},"title":"About"},"/docs/artifact/":{"data":{"":"If you are interested in reproducing the evaluation results mentioned in our paper, please download our artifact from Zenodo. Then follow the instructions of README.md.\n"},"title":"Replication Package"},"/docs/coq/":{"data":{"":"Our Coq proof artifact is included in the Zenodo package and also hosted on Github.\nA prebuilt documentation is hosted here.\n"},"title":"Coq Doc"},"/docs/getting-started/":{"data":{"":"Our tool is hosted on Github. Although it is based on Python and Z3, you don\u0026rsquo;t have to install them \u0026ndash; we use Nix to manage all the required dependencies. If you are using Windows, we provide a Docker file that allows you to build our tool easily, which internally invoke Nix.\n"},"title":"Getting Started"},"/docs/getting-started/1_build/":{"data":{"":"We support two ways of building Lamb, if you have installed nix on your machine, we suggest the first option.","option-1-via-nix#Option 1: Via Nix":"nix build --no-link Refer to this guide in case you got error messages requesting enable the experimental features of Nix.\nTo enter a bash shell that provides an interactive build environment with all dependencies loaded, type:\nnix develop ","option-2-via-docker#Option 2: Via Docker":"First, build a Docker image with Nix inside:\ndocker build . -t lamb:0.1.0 Then, start a container using that image, so that you will be dropped into the Nix development shell:\ndocker run -it lamb:0.1.0 You should notice that the shell prompt now ends with [lamb-dev]\u0026gt;.\n"},"title":"Build"},"/docs/getting-started/2_tour/":{"data":{"":"In the Nix development shell, type the following command to run a small example:\npython -m lamb tests/motivating-example.bnf ","ambiguous-sentence#Ambiguous Sentence":"This grammar is indeed ambiguous:\n...lines of solving process omitted... *** Ambiguous sentence of length 3 found. It shall be listed below. *** do nop nop *** Found locally ambiguous variable: \u0026#34;new-var-0\u0026#34;. It corresponds to token(s) [1, 3] in the ambiguous sentence. *** NOTE: indexing for tokens in the sentence starts at 1. Spaces in the sentence are denoted as `‚ê£\u0026#39;. NEXT STEP: Review all parse trees using the following commands (execute line by line): show tree new-var-0 0 show tree new-var-0 1 Type help for other available commands. Command completion available with TAB key. Now entering REPL... smt-ambig\u0026gt; We see the shortest ambiguous sentence has a length of 3:\ndo nop nop ","grammar-file#Grammar File":"The file motivating-example.bnf defines a grammar for a toy imperative language, where a block is defined as a list of statements that are aligned with each other, where each statement is either an empty statement nop or a do-block that recursively takes a block as its body:\nblock ::= stmt|\u0026#43;|; stmt ::= \u0026#34;nop\u0026#34; | \u0026#34;do\u0026#34; block; where notation |+| is the alignment version of Kleene plus: stmt|+| stands for a nonempty sequence of statements that are aligned to each other (i.e., with the same column number).\n","parse-trees#Parse Trees":"In the REPL, type help to see available commands:\nsmt-ambig\u0026gt; help The command show tree A tree-index is used to display the (sub)trees rooted at nonterminal A. As hinted by the output, review the two parse trees of this ambiguous sentence:\nsmt-ambig\u0026gt; show tree new-var-0 0 smt-ambig\u0026gt; show tree new-var-0 1 The S-expression form will always be printed to the console; additionally, a figure will be opened (via open for Mac or xdg-open for Linux) if a preview application has been installed on your OS. Note that although the internal solver works on a binary normal form of the grammar, the trees are still in EBNF.\nTry other commands as you wish and exit the REPL via the command exit.\n"},"title":"A Tour of Lamb"},"/docs/getting-started/3_usage/":{"data":{"":"","command-line-options#Command Line Options":"In the Nix development shell (and project root directory), run python -m lamb -h to see help information. Some frequently used command-line toggles are listed below:\n-c \u0026lt;length\u0026gt;: stop searching for ambiguous sentences after reaching the given length. This is useful if you want to check the bounded unambiguity of a given grammar. -l \u0026lt;length\u0026gt;: start the checking process at the specified length. This assumes that one has already checked that any shorter sentence under this grammar is unambiguous. -s: output metrics like running time as well as REPL outputs as machine-readable JSON strings. ","ebnf-syntax#EBNF Syntax":"Lamb accepts .bnf files as inputs. A formal definition in Antlr can be found here.\nInformally, a .bnf file consists of many production rules, each has the form\n\u0026lt;nonterminal\u0026gt; ::= \u0026lt;expr\u0026gt; ; The expression is one of the following:\nAn identifier representing a nonterminal (e.g., block) A quoted string representing a terminal (e.g., \u0026quot;do\u0026quot;) A parenthesized expression (to promote priority) A sequence of expressions as concatenation A postfix expression An infix expression We include all standard EBNF constructs:\nPostfix + for Kleene plus (occur at least once) Postfix * for Kleene star (occur an arbitrary number of times, including zero) Postfix ? for optional (occur once or none) Infix | for alternative (choose either part) We support the following layout constraints:\nInfix \u0026lt;\u0026gt; or || for alignment (the first tokens of the two parts have the same column number) Infix -\u0026gt; for indentation (the second part has its first token to the right of the first part and a newline in between) Postfix |\u0026gt; for offside (any subsequent lines must start from a column that is further to the right of the start token of the first line) Postfix |\u0026gt;\u0026gt; for offside align (a variant of the above: subsequent lines can start from the same column as that of the first line) Postfix |+| for aligned Kleene plus (a variant of Kleene plus, but each element must be aligned to each other) Postfix |*| for aligned Kleene star (a variant of Kleene plus, but each element must be aligned to each other) Postfix ~ for single-line (one-line) If needed, check the examples in the tests/ folder for a better understanding.\n"},"title":"Usage"}}